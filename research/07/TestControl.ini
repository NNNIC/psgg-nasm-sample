; macro:goto(S_XXX)
goto=@@@
mov     eax, {%1}
mov     [m_nextstate], eax
@@@

; macro:if_eq( data_label_a, data_lable_b, label)
; if ([data_label_a]==[data_label_b]) goto label
if_eq=@@@
mov     eax, [{%1}]
mov     ebx, [{%2}]
sub      eax, ebx
test      eax, eax
jz         {%3}
@@@

; macro:if_zero( data_label, label)
; if ( [data_label] == 0 ) goto label
if_zero=@@@
mov     eax, [{%1}]
test      eax, eax
jz      {%2}
@@@

; macro:if_nonzero( data_label, label)
; if ( [data_label]] != 0) goto label
if_nonzero_jump=@@@
mov     eax, [{%1}]
test    eax, eax
jnz      {%2}
@@@

#state_members=@@@
[[members]]
@@@


@branch=@@@

<<<?"{%0}"/^brifc{0,1}$/
    cmp   eax, {%N}
    jne    [[state]]_skip_{%N}
    $macro:goto({%1})$
    jmp  [[state]]_branch_end 
[[state]]_skip_{%N} :
>>>

<<<?"{%0}"/^brelseifc{0,1}$/
    cmp   eax, {%N}
    jne    [[state]]_skip_{%N}
    $macro:goto({%1})$
    jmp  [[state]]_branch_end 
[[state]]_skip_{%N} : 
>>>

<<<?"{%0}"/^brelse$/
    $macro:goto({%1})$
    jmp  [[state]]_branch_end 
>>>
@@@

@mcmt=@@@
;    {%0}
@@@

; #             #
; # GOSUB #
; #              #
; macro:gosub(sub,nex)
gosub=@@@
    ; if m_callstack_level >= MAX_CALL_STACK :
    mov eax, [m_callstack_level]
    cmp eax, MAX_CALL_STACK
    jl [[state]]_gosub_less
    mov eax, msg_stackoverflow
    jmp err_end

[[state]]_gosub_less:
     mov edi, [m_callstack_level]
     mov dword [m_callstack + edi], {%2} ; m_callstack[m_callstack_level] = nex
     inc edi
     mov [m_callstack_level], edi                ; m_callstack_level ++
     $macro:goto({%1})$
@@@

; macro:return
return=@@@
    ; if m_callstack_level <= 0
    mov eax, [m_callstack_level]
    cmp eax, 0
    jg [[state]]_return_grater
    mov eax, msg_stackunderflow
    jmp err_end

[[state]]_return_grater:
    mov edi, [m_callstack_level]    ; m_callstack_level = m_callstack_level - 1  
    dec edi
    mov [m_callstack_level], edi
    mov eax, dword [m_callstack + edi]
    mov [m_nextstate],eax
@@@